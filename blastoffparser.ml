type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | COMMA
  | MATMUL
  | ELMUL
  | ASSIGN
  | FDECL
  | RANGEMAT
  | CONV
  | PLUS
  | MINUS
  | RAISE
  | PLUSREDUCE
  | MULREDUCE
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | IMAT
  | ELMAT
  | TRANSP
  | VLINE
  | SEMIRING
  | CONCAT
  | ZEROMAT
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | FLOAT
  | VOID
  | LITERAL of (int)
  | ID of (string)
  | FLIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "blastoffparser.mly"
open Ast
# 56 "blastoffparser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* LBRACK *);
  263 (* RBRACK *);
  264 (* COMMA *);
  265 (* MATMUL *);
  266 (* ELMUL *);
  267 (* ASSIGN *);
  268 (* FDECL *);
  269 (* RANGEMAT *);
  270 (* CONV *);
  271 (* PLUS *);
  272 (* MINUS *);
  273 (* RAISE *);
  274 (* PLUSREDUCE *);
  275 (* MULREDUCE *);
  276 (* NOT *);
  277 (* EQ *);
  278 (* NEQ *);
  279 (* LT *);
  280 (* LEQ *);
  281 (* GT *);
  282 (* GEQ *);
  283 (* AND *);
  284 (* OR *);
  285 (* IMAT *);
  286 (* ELMAT *);
  287 (* TRANSP *);
  288 (* VLINE *);
  289 (* SEMIRING *);
  290 (* CONCAT *);
  291 (* ZEROMAT *);
  292 (* RETURN *);
  293 (* IF *);
  294 (* ELSE *);
  295 (* FOR *);
  296 (* WHILE *);
  297 (* INT *);
  298 (* BOOL *);
  299 (* FLOAT *);
  300 (* VOID *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  301 (* LITERAL *);
  302 (* ID *);
  303 (* FLIT *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\004\000\004\000\005\000\005\000\002\000\002\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\008\000\008\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\010\000\
\010\000\011\000\011\000\009\000\009\000\012\000\012\000\000\000"

let yylen = "\002\000\
\002\000\008\000\000\000\001\000\001\000\003\000\000\000\002\000\
\002\000\001\000\003\000\003\000\005\000\007\000\009\000\005\000\
\000\000\001\000\001\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000\002\000\002\000\003\000\
\004\000\003\000\003\000\004\000\006\000\004\000\003\000\001\000\
\003\000\001\000\003\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\007\000\000\000\056\000\000\000\000\000\007\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\019\000\000\000\001\000\010\000\008\000\
\000\000\000\000\000\000\050\000\000\000\000\000\000\000\000\000\
\039\000\037\000\038\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\009\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\042\000\012\000\000\000\
\047\000\000\000\000\000\000\000\000\000\043\000\000\000\011\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\036\000\035\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\051\000\005\000\000\000\000\000\046\000\044\000\000\000\000\000\
\000\000\000\000\041\000\000\000\000\000\000\000\000\000\000\000\
\000\000\016\000\000\000\007\000\006\000\045\000\000\000\000\000\
\000\000\014\000\000\000\002\000\000\000\015\000"

let yydgoto = "\002\000\
\003\000\004\000\023\000\099\000\100\000\024\000\025\000\040\000\
\077\000\029\000\030\000\078\000"

let yysindex = "\014\000\
\000\000\000\000\000\000\046\000\137\255\000\000\219\254\235\254\
\027\255\137\255\137\255\137\255\039\255\137\255\043\255\137\255\
\068\255\069\255\080\255\000\000\029\255\000\000\000\000\000\000\
\170\000\224\000\083\255\000\000\002\255\075\255\088\255\046\255\
\000\000\000\000\000\000\060\255\204\001\064\255\225\001\116\255\
\137\255\137\255\137\255\137\255\137\255\000\000\137\255\137\255\
\137\255\137\255\137\255\198\255\137\255\137\255\137\255\137\255\
\137\255\137\255\137\255\137\255\137\255\000\000\000\000\219\254\
\000\000\079\255\081\255\122\255\132\255\000\000\123\255\000\000\
\250\000\135\255\020\001\225\001\134\255\130\255\225\001\246\254\
\246\254\125\255\252\254\252\254\000\000\000\000\032\002\032\002\
\059\255\059\255\059\255\059\255\011\002\246\001\125\255\075\255\
\000\000\000\000\142\255\140\255\000\000\000\000\104\255\173\255\
\137\255\173\255\000\000\137\255\147\255\106\255\151\255\120\255\
\198\000\000\000\225\001\000\000\000\000\000\000\173\255\137\255\
\128\255\000\000\156\255\000\000\173\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\160\255\
\000\000\000\000\000\000\000\000\086\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\071\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\255\000\000\
\000\000\160\255\000\000\159\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\167\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\078\255\000\000\168\255\020\255\048\001\
\076\001\114\000\011\255\104\001\000\000\000\000\076\255\220\255\
\132\001\144\001\172\001\184\001\223\255\007\000\142\000\099\255\
\000\000\000\000\000\000\175\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
\000\000\000\000\113\255\000\000\000\000\000\000\000\000\177\255\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\250\255\000\000\000\000\000\000\244\255\006\000\216\255\
\000\000\000\000\112\000\000\000"

let yytablesize = 834
let yytable = "\027\000\
\013\000\074\000\064\000\049\000\047\000\048\000\052\000\028\000\
\065\000\049\000\026\000\021\000\052\000\021\000\001\000\033\000\
\034\000\035\000\021\000\037\000\040\000\039\000\040\000\061\000\
\031\000\021\000\021\000\040\000\032\000\061\000\044\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\045\000\
\036\000\018\000\021\000\018\000\038\000\022\000\073\000\039\000\
\075\000\076\000\079\000\040\000\080\000\081\000\082\000\083\000\
\084\000\086\000\087\000\088\000\089\000\090\000\091\000\092\000\
\093\000\094\000\095\000\047\000\048\000\041\000\042\000\048\000\
\049\000\050\000\051\000\052\000\025\000\048\000\025\000\123\000\
\054\000\043\000\066\000\025\000\005\000\054\000\006\000\063\000\
\007\000\067\000\068\000\112\000\061\000\114\000\008\000\009\000\
\025\000\025\000\010\000\049\000\011\000\012\000\025\000\025\000\
\069\000\049\000\122\000\025\000\071\000\121\000\113\000\013\000\
\126\000\115\000\014\000\055\000\072\000\015\000\016\000\017\000\
\055\000\018\000\019\000\097\000\101\000\039\000\098\000\020\000\
\021\000\005\000\103\000\006\000\124\000\007\000\102\000\105\000\
\107\000\108\000\005\000\008\000\009\000\052\000\007\000\010\000\
\109\000\011\000\012\000\110\000\111\000\009\000\116\000\117\000\
\010\000\118\000\011\000\012\000\013\000\119\000\125\000\014\000\
\017\000\052\000\015\000\016\000\017\000\013\000\018\000\019\000\
\014\000\003\000\053\000\015\000\020\000\021\000\005\000\096\000\
\006\000\004\000\007\000\017\000\000\000\020\000\021\000\000\000\
\008\000\009\000\000\000\000\000\010\000\000\000\011\000\012\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\000\
\000\000\013\000\000\000\007\000\014\000\000\000\000\000\015\000\
\016\000\017\000\009\000\018\000\019\000\010\000\000\000\011\000\
\012\000\020\000\021\000\000\000\026\000\000\000\026\000\031\000\
\000\000\031\000\013\000\026\000\085\000\014\000\031\000\000\000\
\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\026\000\026\000\020\000\021\000\000\000\000\000\026\000\026\000\
\000\000\031\000\031\000\026\000\000\000\000\000\031\000\000\000\
\000\000\000\000\013\000\000\000\013\000\013\000\013\000\032\000\
\000\000\032\000\000\000\000\000\013\000\013\000\032\000\000\000\
\013\000\000\000\013\000\013\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\013\000\000\000\000\000\
\013\000\000\000\032\000\013\000\013\000\013\000\032\000\013\000\
\013\000\000\000\000\000\000\000\000\000\013\000\013\000\005\000\
\000\000\006\000\000\000\007\000\000\000\000\000\000\000\000\000\
\000\000\008\000\009\000\000\000\000\000\010\000\000\000\011\000\
\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\013\000\000\000\000\000\014\000\000\000\000\000\
\015\000\016\000\017\000\000\000\018\000\019\000\020\000\000\000\
\020\000\000\000\020\000\021\000\000\000\020\000\020\000\020\000\
\000\000\000\000\000\000\020\000\020\000\020\000\020\000\000\000\
\000\000\000\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\033\000\000\000\033\000\020\000\000\000\020\000\
\000\000\033\000\033\000\033\000\000\000\000\000\000\000\033\000\
\033\000\033\000\000\000\000\000\000\000\000\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\034\000\000\000\
\034\000\033\000\000\000\033\000\000\000\034\000\034\000\034\000\
\000\000\000\000\000\000\034\000\034\000\034\000\000\000\000\000\
\000\000\000\000\034\000\034\000\034\000\034\000\034\000\034\000\
\034\000\034\000\046\000\000\000\000\000\034\000\000\000\034\000\
\000\000\000\000\047\000\048\000\000\000\000\000\000\000\049\000\
\050\000\051\000\052\000\000\000\000\000\000\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\120\000\000\000\
\000\000\000\000\000\000\061\000\000\000\000\000\047\000\048\000\
\000\000\000\000\000\000\049\000\050\000\051\000\052\000\000\000\
\000\000\000\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\062\000\000\000\000\000\000\000\000\000\061\000\
\047\000\048\000\000\000\000\000\000\000\049\000\050\000\051\000\
\052\000\000\000\000\000\000\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\104\000\000\000\000\000\000\000\
\000\000\061\000\047\000\048\000\000\000\000\000\000\000\049\000\
\050\000\051\000\052\000\000\000\000\000\000\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\106\000\000\000\
\000\000\000\000\000\000\061\000\047\000\048\000\000\000\000\000\
\000\000\049\000\050\000\051\000\052\000\000\000\000\000\000\000\
\053\000\054\000\055\000\056\000\057\000\058\000\059\000\060\000\
\023\000\000\000\023\000\000\000\000\000\061\000\000\000\023\000\
\023\000\023\000\000\000\000\000\000\000\000\000\023\000\023\000\
\000\000\000\000\000\000\000\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\024\000\000\000\024\000\023\000\
\000\000\000\000\000\000\024\000\024\000\024\000\000\000\000\000\
\000\000\000\000\024\000\024\000\000\000\000\000\000\000\000\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\022\000\000\000\022\000\024\000\000\000\000\000\000\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\022\000\022\000\
\000\000\000\000\000\000\000\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\027\000\000\000\027\000\022\000\
\000\000\000\000\000\000\027\000\000\000\000\000\000\000\000\000\
\028\000\000\000\028\000\000\000\000\000\000\000\000\000\028\000\
\027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
\000\000\000\000\000\000\027\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\029\000\000\000\029\000\028\000\
\000\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\
\030\000\000\000\030\000\000\000\000\000\000\000\000\000\030\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\000\000\000\000\000\000\029\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\047\000\048\000\000\000\030\000\
\000\000\049\000\050\000\051\000\052\000\000\000\000\000\000\000\
\053\000\054\000\055\000\056\000\057\000\058\000\059\000\060\000\
\000\000\047\000\048\000\070\000\000\000\061\000\049\000\050\000\
\051\000\052\000\000\000\000\000\000\000\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\000\000\047\000\048\000\
\000\000\000\000\061\000\049\000\050\000\051\000\052\000\000\000\
\000\000\000\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\000\000\000\000\047\000\048\000\000\000\000\000\061\000\
\049\000\050\000\051\000\052\000\000\000\000\000\000\000\053\000\
\054\000\055\000\056\000\057\000\058\000\000\000\000\000\000\000\
\047\000\048\000\000\000\000\000\061\000\049\000\050\000\051\000\
\052\000\000\000\000\000\000\000\000\000\000\000\055\000\056\000\
\057\000\058\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\061\000"

let yycheck = "\006\000\
\000\000\042\000\001\001\014\001\009\001\010\001\017\001\045\001\
\007\001\014\001\005\000\001\001\017\001\003\001\001\000\010\000\
\011\000\012\000\008\001\014\000\001\001\016\000\003\001\034\001\
\046\001\015\001\016\001\008\001\002\001\034\001\002\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\011\001\
\002\001\001\001\032\001\003\001\002\001\000\000\041\000\042\000\
\043\000\044\000\045\000\032\001\047\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\061\000\009\001\010\001\002\001\002\001\001\001\
\014\001\015\001\016\001\017\001\001\001\007\001\003\001\120\000\
\003\001\002\001\008\001\008\001\002\001\008\001\004\001\005\001\
\006\001\002\001\045\001\104\000\034\001\106\000\012\001\013\001\
\021\001\022\001\016\001\001\001\018\001\019\001\027\001\028\001\
\045\001\007\001\119\000\032\001\045\001\116\000\105\000\029\001\
\125\000\108\000\032\001\003\001\001\001\035\001\036\001\037\001\
\008\001\039\001\040\001\045\001\003\001\120\000\046\001\045\001\
\046\001\002\001\008\001\004\001\005\001\006\001\003\001\001\001\
\003\001\008\001\002\001\012\001\013\001\017\001\006\001\016\001\
\003\001\018\001\019\001\008\001\045\001\013\001\004\001\046\001\
\016\001\003\001\018\001\019\001\029\001\038\001\003\001\032\001\
\001\001\003\001\035\001\036\001\037\001\029\001\039\001\040\001\
\032\001\003\001\003\001\035\001\045\001\046\001\002\001\064\000\
\004\001\003\001\006\001\003\001\255\255\045\001\046\001\255\255\
\012\001\013\001\255\255\255\255\016\001\255\255\018\001\019\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\001\
\255\255\029\001\255\255\006\001\032\001\255\255\255\255\035\001\
\036\001\037\001\013\001\039\001\040\001\016\001\255\255\018\001\
\019\001\045\001\046\001\255\255\001\001\255\255\003\001\001\001\
\255\255\003\001\029\001\008\001\031\001\032\001\008\001\255\255\
\035\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\021\001\022\001\045\001\046\001\255\255\255\255\027\001\028\001\
\255\255\027\001\028\001\032\001\255\255\255\255\032\001\255\255\
\255\255\255\255\002\001\255\255\004\001\005\001\006\001\001\001\
\255\255\003\001\255\255\255\255\012\001\013\001\008\001\255\255\
\016\001\255\255\018\001\019\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\029\001\255\255\255\255\
\032\001\255\255\028\001\035\001\036\001\037\001\032\001\039\001\
\040\001\255\255\255\255\255\255\255\255\045\001\046\001\002\001\
\255\255\004\001\255\255\006\001\255\255\255\255\255\255\255\255\
\255\255\012\001\013\001\255\255\255\255\016\001\255\255\018\001\
\019\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\029\001\255\255\255\255\032\001\255\255\255\255\
\035\001\036\001\037\001\255\255\039\001\040\001\001\001\255\255\
\003\001\255\255\045\001\046\001\255\255\008\001\009\001\010\001\
\255\255\255\255\255\255\014\001\015\001\016\001\017\001\255\255\
\255\255\255\255\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\001\001\255\255\003\001\032\001\255\255\034\001\
\255\255\008\001\009\001\010\001\255\255\255\255\255\255\014\001\
\015\001\016\001\255\255\255\255\255\255\255\255\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\001\001\255\255\
\003\001\032\001\255\255\034\001\255\255\008\001\009\001\010\001\
\255\255\255\255\255\255\014\001\015\001\016\001\255\255\255\255\
\255\255\255\255\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\001\001\255\255\255\255\032\001\255\255\034\001\
\255\255\255\255\009\001\010\001\255\255\255\255\255\255\014\001\
\015\001\016\001\017\001\255\255\255\255\255\255\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\001\001\255\255\
\255\255\255\255\255\255\034\001\255\255\255\255\009\001\010\001\
\255\255\255\255\255\255\014\001\015\001\016\001\017\001\255\255\
\255\255\255\255\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\003\001\255\255\255\255\255\255\255\255\034\001\
\009\001\010\001\255\255\255\255\255\255\014\001\015\001\016\001\
\017\001\255\255\255\255\255\255\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\003\001\255\255\255\255\255\255\
\255\255\034\001\009\001\010\001\255\255\255\255\255\255\014\001\
\015\001\016\001\017\001\255\255\255\255\255\255\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\003\001\255\255\
\255\255\255\255\255\255\034\001\009\001\010\001\255\255\255\255\
\255\255\014\001\015\001\016\001\017\001\255\255\255\255\255\255\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\001\001\255\255\003\001\255\255\255\255\034\001\255\255\008\001\
\009\001\010\001\255\255\255\255\255\255\255\255\015\001\016\001\
\255\255\255\255\255\255\255\255\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\001\001\255\255\003\001\032\001\
\255\255\255\255\255\255\008\001\009\001\010\001\255\255\255\255\
\255\255\255\255\015\001\016\001\255\255\255\255\255\255\255\255\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\001\001\255\255\003\001\032\001\255\255\255\255\255\255\008\001\
\255\255\255\255\255\255\255\255\255\255\255\255\015\001\016\001\
\255\255\255\255\255\255\255\255\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\001\001\255\255\003\001\032\001\
\255\255\255\255\255\255\008\001\255\255\255\255\255\255\255\255\
\001\001\255\255\003\001\255\255\255\255\255\255\255\255\008\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\255\255\255\255\032\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\001\001\255\255\003\001\032\001\
\255\255\255\255\255\255\008\001\255\255\255\255\255\255\255\255\
\001\001\255\255\003\001\255\255\255\255\255\255\255\255\008\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\255\255\255\255\032\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\009\001\010\001\255\255\032\001\
\255\255\014\001\015\001\016\001\017\001\255\255\255\255\255\255\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\009\001\010\001\032\001\255\255\034\001\014\001\015\001\
\016\001\017\001\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\009\001\010\001\
\255\255\255\255\034\001\014\001\015\001\016\001\017\001\255\255\
\255\255\255\255\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\255\255\255\255\009\001\010\001\255\255\255\255\034\001\
\014\001\015\001\016\001\017\001\255\255\255\255\255\255\021\001\
\022\001\023\001\024\001\025\001\026\001\255\255\255\255\255\255\
\009\001\010\001\255\255\255\255\034\001\014\001\015\001\016\001\
\017\001\255\255\255\255\255\255\255\255\255\255\023\001\024\001\
\025\001\026\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\034\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACK\000\
  RBRACK\000\
  COMMA\000\
  MATMUL\000\
  ELMUL\000\
  ASSIGN\000\
  FDECL\000\
  RANGEMAT\000\
  CONV\000\
  PLUS\000\
  MINUS\000\
  RAISE\000\
  PLUSREDUCE\000\
  MULREDUCE\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  IMAT\000\
  ELMAT\000\
  TRANSP\000\
  VLINE\000\
  SEMIRING\000\
  CONCAT\000\
  ZEROMAT\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  VOID\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  ID\000\
  FLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 35 "blastoffparser.mly"
                ( _1 )
# 467 "blastoffparser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 39 "blastoffparser.mly"
   ( Fdecl(_2, _4, List.rev _7) )
# 476 "blastoffparser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 42 "blastoffparser.mly"
                  ( [] )
# 482 "blastoffparser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 43 "blastoffparser.mly"
                  ( _1 )
# 489 "blastoffparser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 46 "blastoffparser.mly"
                         ( [_1]     )
# 496 "blastoffparser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 47 "blastoffparser.mly"
                         ( _3 :: _1 )
# 504 "blastoffparser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 50 "blastoffparser.mly"
                   ( [] )
# 510 "blastoffparser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 51 "blastoffparser.mly"
                   ( _2 :: _1 )
# 518 "blastoffparser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 54 "blastoffparser.mly"
                                            ( Expr _1               )
# 525 "blastoffparser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 55 "blastoffparser.mly"
                                            ( _1                    )
# 532 "blastoffparser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 56 "blastoffparser.mly"
                                            ( Return _2             )
# 539 "blastoffparser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 57 "blastoffparser.mly"
                                            ( Block(List.rev _2)    )
# 546 "blastoffparser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 58 "blastoffparser.mly"
                                            ( If(_3, _5, Block([])) )
# 554 "blastoffparser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 59 "blastoffparser.mly"
                                            ( If(_3, _5, _7)        )
# 563 "blastoffparser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 61 "blastoffparser.mly"
                                            ( For(_3, _5, _7, _9)   )
# 573 "blastoffparser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 62 "blastoffparser.mly"
                                            ( While(_3, _5)         )
# 581 "blastoffparser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "blastoffparser.mly"
                  ( Noexpr )
# 587 "blastoffparser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 66 "blastoffparser.mly"
                  ( _1 )
# 594 "blastoffparser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 69 "blastoffparser.mly"
                     ( Literal(_1)            )
# 601 "blastoffparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 70 "blastoffparser.mly"
                     ( Id(_1)                 )
# 608 "blastoffparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 71 "blastoffparser.mly"
                     ( Binop(_1, Add,   _3)   )
# 616 "blastoffparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 72 "blastoffparser.mly"
                     ( Binop(_1, Sub,   _3)   )
# 624 "blastoffparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 73 "blastoffparser.mly"
                      ( Binop(_1, Matmul,  _3)   )
# 632 "blastoffparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 74 "blastoffparser.mly"
                     ( Binop(_1, Elmul,  _3)   )
# 640 "blastoffparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 75 "blastoffparser.mly"
                     ( Binop(_1, Equal, _3)   )
# 648 "blastoffparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 76 "blastoffparser.mly"
                     ( Binop(_1, Neq,   _3)   )
# 656 "blastoffparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 77 "blastoffparser.mly"
                     ( Binop(_1, Less,  _3)   )
# 664 "blastoffparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 78 "blastoffparser.mly"
                     ( Binop(_1, Leq,   _3)   )
# 672 "blastoffparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 79 "blastoffparser.mly"
                     ( Binop(_1, Greater, _3) )
# 680 "blastoffparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 80 "blastoffparser.mly"
                     ( Binop(_1, Geq,   _3)   )
# 688 "blastoffparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 81 "blastoffparser.mly"
                     ( Binop(_1, And,   _3)   )
# 696 "blastoffparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 82 "blastoffparser.mly"
                     ( Binop(_1, Or,    _3)   )
# 704 "blastoffparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 83 "blastoffparser.mly"
                     ( Binop(_1, Conv,  _3)   )
# 712 "blastoffparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 84 "blastoffparser.mly"
                       ( Binop(_1, Concat,  _3)   )
# 720 "blastoffparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 85 "blastoffparser.mly"
                     ( Binop(_1, Exponent, _3)  )
# 728 "blastoffparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 86 "blastoffparser.mly"
                      ( Unop(Transp, _1)      )
# 735 "blastoffparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 87 "blastoffparser.mly"
                     ( Unop(Plusreduce, _2)   )
# 742 "blastoffparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 88 "blastoffparser.mly"
                     ( Unop(Mulreduce, _2)    )
# 749 "blastoffparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 89 "blastoffparser.mly"
                         ( Unop(Neg, _2)      )
# 756 "blastoffparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 90 "blastoffparser.mly"
                     ( Assign(_1, _3)         )
# 764 "blastoffparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 91 "blastoffparser.mly"
                              ( Call(_1, _3)  )
# 772 "blastoffparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 92 "blastoffparser.mly"
                       ( _2                   )
# 779 "blastoffparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 93 "blastoffparser.mly"
                       ( Unop(Size, _2)       )
# 786 "blastoffparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 94 "blastoffparser.mly"
                               ( Imat(_3)        )
# 793 "blastoffparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 95 "blastoffparser.mly"
                                                (Zeromat(_3, _5))
# 801 "blastoffparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 96 "blastoffparser.mly"
                                   (Rangemat(_3) )
# 808 "blastoffparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'mat_content) in
    Obj.repr(
# 97 "blastoffparser.mly"
                              ( Matlit(_2) )
# 815 "blastoffparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mat_row) in
    Obj.repr(
# 100 "blastoffparser.mly"
            ( [_1] )
# 822 "blastoffparser.ml"
               : 'mat_content))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mat_content) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mat_row) in
    Obj.repr(
# 101 "blastoffparser.mly"
                             (_3 :: _1)
# 830 "blastoffparser.ml"
               : 'mat_content))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 104 "blastoffparser.mly"
            ( [_1] )
# 837 "blastoffparser.ml"
               : 'mat_row))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mat_row) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 105 "blastoffparser.mly"
                          (_3 :: _1 )
# 845 "blastoffparser.ml"
               : 'mat_row))
; (fun __caml_parser_env ->
    Obj.repr(
# 108 "blastoffparser.mly"
                  ( [] )
# 851 "blastoffparser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 109 "blastoffparser.mly"
               ( List.rev _1 )
# 858 "blastoffparser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "blastoffparser.mly"
                            ( [_1] )
# 865 "blastoffparser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "blastoffparser.mly"
                         ( _3 :: _1 )
# 873 "blastoffparser.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
