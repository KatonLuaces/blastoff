def plusColumnReduce(A){
    #_;
    return (+%(A^T))^T;
}

def rangeFromVector(v){
    #logical;
    vlogic = v~1;
    #arithmetic;
    n = plusColumnReduce(v);
    u = Zero(1:n);
    j = 0;
    i = 0;

    m = |v|[0];
    while ( i < m ) {
        if (v[i] > 0) {
            u[j] = i;
            j = j + 1;
        }
        i = i + 1;
    }
    return u;
}

def One(size){
    A = Zero(size);
    oneSize = |A|;
    A[range(oneSize[0]), range(oneSize[1])] = 1;
    return A;
}

def BFS(G, frontier){
    #logical;
    N = |G|[0];
    levels = Zero(N : 1);
    maskedGT = G^T;
    depth = 0;
    while (plusColumnReduce(frontier)) {
        #arithmetic;
        depth = depth + 1;
        #logical;
        levels[rangeFromVector(frontier)] = depth;
        mask = !(frontier^T)[0, Zero(N:1), 1, N];
        maskedGT = maskedGT @ mask;
        frontier = maskedGT*frontier;
    }
    #arithmetic;
    return levels + (One(|levels|)~(-1));
}

G = [
    0->1;
    0->2;
    2->3
];

frontier = [1;0;0;0];
print(toString(BFS(G, frontier)));
