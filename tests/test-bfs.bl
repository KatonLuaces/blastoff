def plusColumnReduce(A){
    #_;
    return (+%(A^T))^T;
}

def rangeFromVector(v){
    #logical;
    vlogic = v~1;
    #arithmetic;
    n = plusColumnReduce(vlogic);
    u = Zero(n:1);
    j = 0;
    for (i = 0; i < |v|[0]; i += 1) {
        if (v[i]) {
            u[j] = i;
            j = j + 1;
        }
    }
    return u;
}

def One(size){
    A = Zero(size);
    A[range(size[0]), range(size[1])] = 1;
    return A;
}

def BFS(G, frontier){
    #logical;
    N = |G|[0];
    levels = Zero(N : 1);
    maskedGT = G^T;
    depth = 0;
    while (plusColumnReduce(frontier)) {
        #arithmetic;
        depth = depth + 1;
        #logical;
        levels[rangeFromVector(frontier)] = depth;
        mask = !(frontier)[0, Zero(N:1), N, 1];
        maskedGT = maskedGT @ mask;
        frontier = maskedGT*frontier;
    }
    #arithmetic;
    return levels + One(|levels|)~(-1);
}


// Graph is from Algorithms, Papadimitriou et al., Figure 3.9.a
G = [
  0->1;
  1->2;
  1->3;
  1->4;
  2->5;
  4->1;
  4->5;
  4->6;
  5->2;
  5->7;
  6->7;
  6->9;
  7->10;
  8->6;
  9->8;
  10->11;
  11->9;
  12->0
];
frontier = Zero(|G|[0] : 1);
frontier[0] = 1;

print(toString(BFS(G, frontier)));
